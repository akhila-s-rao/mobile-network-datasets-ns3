# list of all the file names and categories 

# All the log files from the ns-3 inbuilt RAN logs enabled by EnableTraces() 
# I have taken the Interference file off this list because it was Goddamn huge and I did not plan on using it anyway
ran_files = ['UlSinrStats.txt', # observed at basestation 
             'DlRsrpSinrStats.txt', # observed at UEs
             'UlTxPhyStats.txt', # observed at UEs 
             'UlRxPhyStats.txt', # observed at basestation 
             'DlTxPhyStats.txt', # observed at basestation 
             'DlRxPhyStats.txt', # observed at UEs
             'UlMacStats.txt', # observed at basestation 
             'DlMacStats.txt', # observed at basestation 
             'UlRlcStats.txt', # observed at ?
             'DlRlcStats.txt', # observed at ?
             'UlPdcpStats.txt', # observed at ?
             'DlPdcpStats.txt' # observed at ?
             ]
#ran_files = ['DlTxPhyStats.txt', 'UlRxPhyStats.txt', 
#             'UlSinrStats.txt', 'UlPdcpStats.txt', 'DlRsrpSinrStats.txt', 
#             'UlRlcStats.txt', 'UlMacStats.txt', 'UlTxPhyStats.txt', 
#             'DlPdcpStats.txt', 'DlRlcStats.txt', 'DlRxPhyStats.txt', 
#             'DlMacStats.txt']

# All application related log files
app_files = ['vrBurst_trace.txt', 'vrFragment_trace.txt', # VR
             'dashClient_trace.txt', 'mpegPlayer_trace.txt', # video streaming
             'httpServerDelay_trace.txt', 'httpClientDelay_trace.txt', 'httpClientRtt_trace.txt', # web browsing
             'dlThroughput_trace.txt', 'ulThroughput_trace.txt', # throughput measurement
             'delay_trace.txt', 'rtt_trace.txt', # delay measurement
             'flow_trace.txt'] # UDP flow 

# Other files that have connectivity and location info
other_files = ['handover_trace.txt', 'mobility_trace.txt']

# These are files that keep track of the bytes flying through the different layer.
# I am interested in this specific group to make sure that the bytes flowing through 
# the layers is roughly the same after accounting for headers, and to also make sure
# that what we expect to see for each UL and DL are actually seen. 
files_with_bytes = ['DlTxPhyStats.txt', 'DlRxPhyStats.txt',
                    'UlTxPhyStats.txt', 'UlRxPhyStats.txt',
                    'DlMacStats.txt', 'UlMacStats.txt',
                    'DlRlcStats.txt', 'UlRlcStats.txt',  
                    'DlPdcpStats.txt', 'UlPdcpStats.txt']

# Some internally generated files have a trailing tab at the end of each row, 
# but not at the end of the first header row
# This causes the read_csv function to read the data weirdly. 
# So these files have been grouped to fix that
files_with_trailing_tab=['DlRlcStats.txt', 'UlRlcStats.txt', 
                         'DlPdcpStats.txt', 'UlPdcpStats.txt']

# The timestamp unit in different RAN log files is different, even though they are all generated by the same 
# internal ns-3 logging system (eye roll)
file_name_to_tstamp_unit = {'DlTxPhyStats.txt':'ms', 'UlRxPhyStats.txt':'ms', 
                            'UlSinrStats.txt':'s', 'UlPdcpStats.txt':'s', 'DlRsrpSinrStats.txt':'s', 
                            'UlRlcStats.txt':'s', 'UlMacStats.txt':'s', 'UlTxPhyStats.txt':'ms', 
                            'DlPdcpStats.txt':'s', 'DlRlcStats.txt':'s', 'DlRxPhyStats.txt':'ms', 
                            'DlMacStats.txt':'s'}

# These are files that will go through the windowing process where the time slice is made uniform and all IMSIs are included 
# Don't include files which do not have all IMSIs
a_vs_b_files = ran_files + ['mobility_trace.txt', 'dlThroughput_trace.txt', 'ulThroughput_trace.txt', 
                            'delay_trace.txt', 'rtt_trace.txt', 'vrFragment_trace.txt', 'dashClient_trace.txt'] 

# The internal log files do not follow a consistent naming convention for some metrics
# and hence I need to isolate them and fix it
files_that_use_upper_case_cellid=['UlPdcpStats.txt', 'UlRlcStats.txt', 'DlPdcpStats.txt', 'DlRlcStats.txt']

# columns that are not features and hence can be removed if counting number of features
nonfeature_columns = ['tstamp_us', 'ueId', 'IMSI', 'cellId', 'dir', 'pktUid']

# this is not in files so no need to remove
not_to_be_used_now=['UlInterferenceStats.txt']

# Which files are we actually interested in looking at 

# this has all files except interference
#files = ran_files + app_files + other_files 

# These are to be used to work with or dropped before the columsn fo multiple logs are combined 
# since these are col names before adding any suffix or prefix to col names to combine them over multiple diff logs  
ran_sum_feats = ['sizeTb1', 'sizeTb2', 'nTxPDUs', 'TxBytes', 'nRxPDUs', 'RxBytes', 'size']
#app_sum_feats =  

drop_cols_before_sep = ['ueId', 'RNTI', 'IMSI', 'tstamp_us']
drop_cols_after_sep = ['cellId','cell_cellId']

import matplotlib.pyplot as plt
import numpy as np
  
def plot_histogram(val, colour, xlabel, plot_name, plot_dir):
    plt.figure(figsize=(6,4))
    xlimit=np.nanquantile(val,0.97)
    plt.hist(val[val <= xlimit], bins=50, color=colour, edgecolor='black')
    plt.yticks([])
    plt.xlabel(xlabel); 
    fname=plot_dir+plot_name
    plt.savefig(fname)
    plt.show()
    
def plot_histogram_xlim(val, colour, xlabel, plot_name, plot_dir, xlimit):
    plt.figure(figsize=(6,4))
    val = val[(val > xlimit[0])]
    val = val[(val <= xlimit[1])]
    plt.hist(val, bins=50, color=colour, edgecolor='black')
    plt.yticks([])
    plt.xlabel(xlabel); 
    #plt.xlim(0, xlimit);
    fname=plot_dir+plot_name
    plt.savefig(fname)
    plt.show()    
    
    
def plot_metric_vs_distance_to_cell(dist, y, colour, ylabel, plot_name, plot_dir):
    fig = plt.figure(figsize=(8,6))
    ylimit=np.nanquantile(y,0.99)
    plt.plot(dist[y <= ylimit], y[y <= ylimit], '.', color=colour)
    plt.ylim()
    plt.xlabel('UE - BS distance (meters)'); plt.ylabel(ylabel); 
    fname=plot_dir+plot_name
    plt.savefig(fname)
    plt.show()
    
def plot_metric_vs_sinr(sinr, y, colour, ylabel, plot_name, plot_dir):
    fig = plt.figure(figsize=(8,6))
    ylimit=np.nanquantile(y,0.99)
    plt.plot(sinr[y <= ylimit], y[y <= ylimit], '.', color=colour)
    plt.ylim()
    plt.xlabel('SINR (dB)'); plt.ylabel(ylabel); 
    fname=plot_dir+plot_name
    plt.savefig(fname)
    plt.show()   